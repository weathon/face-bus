{
  "version": 3,
  "sources": ["../../webcam-easy/src/webcam-easy.js"],
  "sourcesContent": ["export default class Webcam {\r\n    constructor(webcamElement, facingMode = 'user', canvasElement = null, snapSoundElement = null) {\r\n      this._webcamElement = webcamElement;\r\n      this._webcamElement.width = this._webcamElement.width || 640;\r\n      this._webcamElement.height = this._webcamElement.height || 360;\r\n      this._facingMode = facingMode;\r\n      this._webcamList = [];\r\n      this._streamList = [];\r\n      this._selectedDeviceId = '';\r\n      this._canvasElement = canvasElement;\r\n      this._snapSoundElement = snapSoundElement;\r\n    }\r\n\r\n    get facingMode(){\r\n      return this._facingMode;\r\n    }\r\n\r\n    set facingMode(value){\r\n      this._facingMode = value;\r\n    }\r\n\r\n    get webcamList(){\r\n      return this._webcamList;\r\n    }\r\n\r\n    get webcamCount(){\r\n      return this._webcamList.length;\r\n    }\r\n\r\n    get selectedDeviceId(){\r\n      return this._selectedDeviceId;\r\n    }\r\n\r\n    /* Get all video input devices info */\r\n    getVideoInputs(mediaDevices){\r\n      this._webcamList = [];\r\n      mediaDevices.forEach(mediaDevice => {\r\n        if (mediaDevice.kind === 'videoinput') {\r\n          this._webcamList.push(mediaDevice);\r\n        }\r\n      });\r\n      if(this._webcamList.length == 1){\r\n        this._facingMode = 'user';\r\n      }    \r\n      return this._webcamList;\r\n    }\r\n\r\n    /* Get media constraints */\r\n    getMediaConstraints() {\r\n        var videoConstraints = {};\r\n        if (this._selectedDeviceId == '') {\r\n            videoConstraints.facingMode =  this._facingMode;\r\n        } else {\r\n            videoConstraints.deviceId = { exact: this._selectedDeviceId};\r\n        }\r\n        videoConstraints.width = {exact: this._webcamElement.width};\r\n        videoConstraints.height = {exact: this._webcamElement.height};\r\n        var constraints = {\r\n            video: videoConstraints,\r\n            audio: false\r\n        };\r\n        return constraints;\r\n    }\r\n\r\n    /* Select camera based on facingMode */ \r\n    selectCamera(){\r\n      for(let webcam of this._webcamList){\r\n        if(   (this._facingMode=='user' && webcam.label.toLowerCase().includes('front'))\r\n          ||  (this._facingMode=='enviroment' && webcam.label.toLowerCase().includes('back'))\r\n        )\r\n        {\r\n          this._selectedDeviceId = webcam.deviceId;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    /* Change Facing mode and selected camera */ \r\n    flip(){\r\n      this._facingMode = (this._facingMode == 'user')? 'enviroment': 'user';\r\n      this._webcamElement.style.transform = \"\";\r\n      this.selectCamera();  \r\n    }\r\n\r\n    /*\r\n      1. Get permission from user\r\n      2. Get all video input devices info\r\n      3. Select camera based on facingMode \r\n      4. Start stream\r\n    */\r\n    async start(startStream = true) {\r\n      return new Promise((resolve, reject) => {         \r\n        this.stop();\r\n        navigator.mediaDevices.getUserMedia(this.getMediaConstraints()) //get permisson from user\r\n          .then(stream => {\r\n            this._streamList.push(stream);\r\n            this.info() //get all video input devices info\r\n              .then(webcams =>{\r\n                this.selectCamera();   //select camera based on facingMode\r\n                if(startStream){\r\n                    this.stream()\r\n                        .then(facingMode =>{\r\n                            resolve(this._facingMode);\r\n                        })\r\n                        .catch(error => {\r\n                            reject(error);\r\n                        });\r\n                }else{\r\n                    resolve(this._selectedDeviceId);\r\n                }\r\n              }) \r\n              .catch(error => {\r\n                reject(error);\r\n              });\r\n          })\r\n          .catch(error => {\r\n              reject(error);\r\n          });\r\n      });\r\n    }\r\n\r\n    /* Get all video input devices info */ \r\n    async info(){\r\n      return new Promise((resolve, reject) => {            \r\n        navigator.mediaDevices.enumerateDevices()\r\n          .then(devices =>{\r\n            this.getVideoInputs(devices);\r\n            resolve(this._webcamList);\r\n          }) \r\n          .catch(error => {\r\n            reject(error);\r\n          });\r\n      });\r\n    }\r\n\r\n    /* Start streaming webcam to video element */ \r\n    async stream() {\r\n      return new Promise((resolve, reject) => {         \r\n        navigator.mediaDevices.getUserMedia(this.getMediaConstraints())\r\n          .then(stream => {\r\n              this._streamList.push(stream);\r\n              this._webcamElement.srcObject = stream;\r\n              if(this._facingMode == 'user'){\r\n                this._webcamElement.style.transform = \"scale(-1,1)\";\r\n              }\r\n              this._webcamElement.play();\r\n              resolve(this._facingMode);\r\n          })\r\n          .catch(error => {\r\n              console.log(error);\r\n              reject(error);\r\n          });\r\n      });\r\n    }\r\n\r\n    /* Stop streaming webcam */ \r\n    stop() {\r\n      this._streamList.forEach(stream => {\r\n        stream.getTracks().forEach(track => {\r\n          track.stop();\r\n        });\r\n      });   \r\n    }\r\n\r\n    snap() {\r\n      if(this._canvasElement!=null){\r\n        if(this._snapSoundElement!= null){\r\n          this._snapSoundElement.play();\r\n        }\r\n        this._canvasElement.height = this._webcamElement.scrollHeight;\r\n        this._canvasElement.width = this._webcamElement.scrollWidth;\r\n        let context = this._canvasElement.getContext('2d');\r\n        if(this._facingMode == 'user'){\r\n          context.translate(this._canvasElement.width, 0);\r\n          context.scale(-1, 1);\r\n        }\r\n        context.clearRect(0, 0, this._canvasElement.width, this._canvasElement.height);\r\n        context.drawImage(this._webcamElement, 0, 0, this._canvasElement.width, this._canvasElement.height);\r\n        let data = this._canvasElement.toDataURL('image/png');\r\n        return data;\r\n      }\r\n      else{\r\n        throw \"canvas element is missing\";\r\n      }\r\n    } \r\n  }"],
  "mappings": "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",
  "names": []
}
